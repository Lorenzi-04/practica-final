package Almacen;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

class Producto {
    String nombre;
    String marca;
    String categoria;
    double precio;
    int cantidad;

    public Producto(String nombre, String marca, String categoria, double precio, int cantidad) {
        this.nombre = nombre;
        this.marca = marca;
        this.categoria = categoria;
        this.precio = precio;
        this.cantidad = cantidad;
    }
}

public class GestionProductos extends JFrame {
    private ArrayList<Producto> productos = new ArrayList<>();
    private DefaultTableModel modeloTabla;

    public GestionProductos() {
        setTitle("Gestión de Productos");
        setSize(600, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        modeloTabla = new DefaultTableModel(new String[]{"Nombre", "Marca", "Categoría", "Precio", "Cantidad"}, 0);
        JTable tablaProductos = new JTable(modeloTabla);
        JScrollPane scrollPane = new JScrollPane(tablaProductos);

        JButton btnNuevo = new JButton("Nuevo");
        JButton btnEditar = new JButton("Editar");
        JButton btnEliminar = new JButton("Eliminar");
        JButton btnVolver = new JButton("Volver");

        // Agregar ActionListeners a los botones
        btnNuevo.addActionListener(e -> mostrarFormulario(null));
        btnEditar.addActionListener(e -> {
            int filaSeleccionada = tablaProductos.getSelectedRow();
            if (filaSeleccionada != -1) {
                mostrarFormulario(productos.get(filaSeleccionada));
            } else {
                JOptionPane.showMessageDialog(this, "Seleccione un producto para editar.");
            }
        });

        btnEliminar.addActionListener(e -> {
            int filaSeleccionada = tablaProductos.getSelectedRow();
            if (filaSeleccionada != -1) {
                productos.remove(filaSeleccionada);
                actualizarTabla();
            } else {
                JOptionPane.showMessageDialog(this, "Seleccione un producto para eliminar.");
            }
        });

        btnVolver.addActionListener(e -> {
            // Implementar lógica para volver a la ventana anterior
            JOptionPane.showMessageDialog(this, "Volver a la ventana anterior.");
        });

        JPanel panelBotones = new JPanel();
        panelBotones.add(btnNuevo);
        panelBotones.add(btnEditar);
        panelBotones.add(btnEliminar);
        panelBotones.add(btnVolver);

        add(scrollPane, BorderLayout.CENTER);
        add(panelBotones, BorderLayout.SOUTH);
    }

    private void mostrarFormulario(Producto producto) {
        JTextField txtNombre = new JTextField(15);
        JTextField txtMarca = new JTextField(15);
        JTextField txtCategoria = new JTextField(15);
        JTextField txtPrecio = new JTextField(15);
        JTextField txtCantidad = new JTextField(15);

        if (producto != null) {
            txtNombre.setText(producto.nombre);
            txtMarca.setText(producto.marca);
            txtCategoria.setText(producto.categoria);
            txtPrecio.setText(String.valueOf(producto.precio));
            txtCantidad.setText(String.valueOf(producto.cantidad));
        }

        JPanel panelFormulario = new JPanel(new GridLayout(5, 2));
        panelFormulario.add(new JLabel("Nombre:"));
        panelFormulario.add(txtNombre);
        panelFormulario.add(new JLabel("Marca:"));
        panelFormulario.add(txtMarca);
        panelFormulario.add(new JLabel("Categoría:"));
        panelFormulario.add(txtCategoria);
        panelFormulario.add(new JLabel("Precio:"));
        panelFormulario.add(txtPrecio);
        panelFormulario.add(new JLabel("Cantidad:"));
        panelFormulario.add(txtCantidad);

        int resultado = JOptionPane.showConfirmDialog(this, panelFormulario,
                producto == null ? "Agregar Producto" : "Editar Producto",
                JOptionPane.OK_CANCEL_OPTION);

        if (resultado == JOptionPane.OK_OPTION) {
            if (producto == null) {
                // Agregar nuevo producto
                productos.add(new Producto(
                        txtNombre.getText(),
                        txtMarca.getText(),
                        txtCategoria.getText(),
                        Double.parseDouble(txtPrecio.getText()),
                        Integer.parseInt(txtCantidad.getText())
                ));
            } else {
                // Editar producto existente
                producto.nombre = txtNombre.getText();
                producto.marca = txtMarca.getText();
                producto.categoria = txtCategoria.getText();
                producto.precio = Double.parseDouble(txtPrecio.getText());
                producto.cantidad = Integer.parseInt(txtCantidad.getText());
            }
            actualizarTabla();
        }
    }

    private void actualizarTabla() {
        modeloTabla.setRowCount(0);
        for (Producto p : productos) {
            modeloTabla.addRow(new Object[]{p.nombre, p.marca, p.categoria, p.precio, p.cantidad});
        }
    }

}
